/* TP de synth√®se 2
* Par CHAMBI ABDELKADER
* 2G2TD3TP6
*/ Mise a jour de tous le code en anglais


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>

#define PORT "1069" // Port open on the server

// Function indicating that the entered command is not correct
void invalidCommand() {
    printf("Invalid command.\n");
    printf("Please use the command in the following way:\n");
    printf("./client gettftp hostname filename\n");
    printf("./client puttftp hostname filename\n");
    printf("./client gettftp hostname filename -blocksize value\n");
    printf("./client puttftp hostname filename -blocksize value\n");
    exit(EXIT_FAILURE);
}

// Function displaying the error message returned by the server
void displayError(char *buf) {
    printf("Client: The server returned the following error message: ");
    if (*(buf + 3) == 0) {
        printf("Not defined, see error message (if any).\n");
    } else if (*(buf + 3) == 1) {
        printf("File not found.\n");
    } else if (*(buf + 3) == 2) {
        printf("Access violation.\n");
    } else if (*(buf + 3) == 3) {
        printf("Disk full or allocation exceeded.\n");
    } else if (*(buf + 3) == 4) {
        printf("Illegal TFTP operation.\n");
    } else if (*(buf + 3) == 5) {
        printf("Unknown transfer ID.\n");
    } else if (*(buf + 3) == 6) {
        printf("File already exists.\n");
    } else if (*(buf + 3) == 7) {
        printf("No such user.\n");
    }
    exit(EXIT_FAILURE);
}

int main(int argc, char *argv[]) {
    // Variables
    struct addrinfo hints;
    struct addrinfo *serverInfo;
    struct addrinfo *current;
    int socketOption;
    socklen_t slen;
    int sockfd;
    int messageLength;
    char *buf;
    struct sockaddr_in addr;
    char *blocksize;
    int blocksizeValue = 512; // Default blocksize value
    int MAXDATA = 512;        // Maximum size of a packet (default)
    char *mode = "octet";      // Transfer mode: set to octet, but could be netascii or mail
    int fileSize = 0;

    // Check the number of arguments
    if (argc != 4 && argc != 6) {
        invalidCommand();
    }

    // Retrieve arguments
    char *server = argv[2]; // Server IP address
    char *file = argv[3];   // File name
    if (argc == 6) {
        blocksizeValue = (int)atoi(argv[5]); // Blocksize value as an integer
        blocksize = argv[5];                  // Blocksize value as ASCII
        MAXDATA = blocksizeValue;
    }

    // Configure the UDP client
    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_INET;      // For the Internet Protocol version 4 (IPv4)
    hints.ai_socktype = SOCK_DGRAM; // Datagram mode

    if ((socketOption = getaddrinfo(server, PORT, &hints, &serverInfo)) != 0) {
        perror("Client: 'Getaddrinfo' error\n");
        exit(EXIT_FAILURE);
    }

    // Reserve a socket
    for (current = serverInfo; current != NULL; current = current->ai_next) {
        if ((sockfd = socket(current->ai_family, current->ai_socktype, current->ai_protocol)) == -1) {
            perror("Client: 'Socket' error\n");
            continue;
        }
        break;
    }

    if (current == NULL) {
        fprintf(stderr, "Client: Unable to reserve a socket\n");
        exit(EXIT_FAILURE);
    }

    // Code for gettftp
if (strcmp(argv[1], "gettftp") == 0) {
    //======== Construction of a Read Request (RRQ) and sending it to the server ========
    // Construction of a Read Request (RRQ)
    char *RRQ;
    int len = strlen(file) + strlen(mode) + 4;
    if (argc == 6) {
        // If the blocksize option is used:
        if (strcmp(argv[4], "-blocksize") == 0) {
            len = strlen(file) + strlen(mode) + 4 + 2 + strlen("blksize") + strlen(blocksize);
        } else {
            invalidCommand();
        }
    }
    RRQ = malloc(len);
    RRQ[0] = 0;
    RRQ[1] = 1; // OPcode
    strcpy(RRQ + 2, file);
    RRQ[2 + strlen(file)] = 0;
    strcpy(RRQ + 3 + strlen(file), mode);
    RRQ[3 + strlen(file) + strlen(mode)] = 0;
    if (argc == 6) {
        // If the blocksize option is used:
        if (strcmp(argv[4], "-blocksize") == 0) {
            strcpy(RRQ + 4 + strlen(file) + strlen(mode), "blksize");
            RRQ[4 + strlen(file) + strlen(mode) + strlen("blksize")] = 0;
            strcpy(RRQ + 5 + strlen(file) + strlen(mode) + strlen("blksize"), blocksize);
            RRQ[5 + strlen(file) + strlen(mode) + strlen("blksize") + strlen(blocksize)] = 0;
        }
    }
    // Send the Read Request (RRQ) to the server
    if ((messageLength = sendto(sockfd, RRQ, len, 0, (struct sockaddr *)current->ai_addr, current->ai_addrlen)) == -1) {
        perror("Client: 'sendto RRQ' Error\n");
        exit(EXIT_FAILURE);
    }
    printf("Client: RRQ of %d bytes sent to the server\n", messageLength);

    //======== Receiving a file ========
    int dataReceived;
    FILE *downloadedFile = fopen(file, "wb"); // Create a file
    do {
        buf = malloc(MAXDATA + 4);
        if ((messageLength = recvfrom(sockfd, buf, MAXDATA + 4, 0, (struct sockaddr *)&addr, &slen)) == -1) {
            perror("Client: 'recvfrom' Error\n");
            exit(EXIT_FAILURE);
        }
        if (*(buf + 1) == 5) {
            displayError(buf);
        }

        buf[messageLength] = '\0';

        // Write the downloaded file
        if (*(buf + 1) != 6) {
            printf("Client: Received packet #%d of %d bytes\n", *(buf + 3), messageLength - 4);
            dataReceived = messageLength - 4;
            fwrite(buf + 4, sizeof(char), dataReceived, downloadedFile);
        }

        //======== Acknowledgment ========
        // Create an acknowledgment
        u_int16_t *ACK;
        len = 4;
        ACK = malloc(len);
        *ACK = htons((u_int16_t)4);               // Opcode
        *(ACK + 1) = htons((u_int16_t)*(buf + 3)); // Block
        // Send the acknowledgment
        if (*(buf + 1) == 6) {
            *(ACK + 1) = htons((u_int16_t)0); // Block
            if ((sendto(sockfd, ACK, len, 0, (struct sockaddr *)&addr, slen)) == -1) {
                perror("Client: 'sendto ACK 0' Error\n");
                exit(EXIT_FAILURE);
            }
            printf("Client: Acknowledgment of packet #%d\n", *(buf + 3));
            dataReceived = MAXDATA;
        } else {
            if ((sendto(sockfd, ACK, len, 0, (struct sockaddr *)&addr, slen)) == -1) {
                perror("Client: 'sendto ACK' Error\n");
                exit(EXIT_FAILURE);
            }
            fileSize += dataReceived;
            printf("Client: Acknowledgment of packet #%d\n", *(buf + 3));
        }
    } while ((dataReceived == MAXDATA)); // When dataReceived < 512 bytes, the transfer is completed (by default) or less than the blocksize value
    fclose(downloadedFile);
    printf("Client: Transfer of the file %s of %d bytes completed\n", file, fileSize);
}

// Code for puttftp
if (strcmp(argv[1], "puttftp") == 0) {
    //======== Construction of a Write Request (WRQ) and sending it to the server ========
    // Construction of a Write Request (WRQ)
    char *WRQ;
    int len = strlen(file) + strlen(mode) + 4;
    if (argc == 6) {
        // If the blocksize option is used:
        if (strcmp(argv[4], "-blocksize") == 0) {
            len = strlen(file) + strlen(mode) + 4 + 2 + strlen("blksize") + strlen(blocksize);
        } else {
            invalidCommand();
        }
    }
    WRQ = malloc(len);
    WRQ[0] = 0;
    WRQ[1] = 2; // OPcode
    strcpy(WRQ + 2, file);
    WRQ[2 + strlen(file)] = 0;
    strcpy(WRQ + 3 + strlen(file), mode);
    WRQ[3 + strlen(file) + strlen(mode)] = 0;

    if (argc == 6) {
        // If the blocksize option is used:
        if (strcmp(argv[4], "-blocksize") == 0) {
            strcpy(WRQ + 4 + strlen(file) + strlen(mode), "blksize");
            WRQ[4 + strlen(file) + strlen(mode) + strlen("blksize")] = 0;
            strcpy(WRQ + 5 + strlen(file) + strlen(mode) + strlen("blksize"), blocksize);
            WRQ[5 + strlen(file) + strlen(mode) + strlen("blksize") + strlen(blocksize)] = 0;
        }
    }
    // Send the Write Request (WRQ) to the server
    if ((messageLength = sendto(sockfd, WRQ, len, 0, (struct sockaddr *)current->ai_addr, current->ai_addrlen)) == -1) {
        perror("Client: 'sendto WRQ' Error\n");
        exit(EXIT_FAILURE);
    }
    printf("CLIENT: WRQ of %d bytes sent to the server\n", messageLength);

    //======== Waiting for acknowledgment from the server ========
    buf = malloc(MAXDATA + 4);
    if ((messageLength = recvfrom(sockfd, buf, MAXDATA + 4, 0, (struct sockaddr *)&addr, &slen)) == -1) {
        perror("Client: 'recvfrom' Error\n");
        exit(EXIT_FAILURE);
    }
    if (*(buf + 1) == 5) {
        displayError(buf);
    }

    printf("Client: Acknowledgment of WRQ from the server: %d%d\n", *(buf), *(buf + 1));

    //======== Preparing the file to be sent ========
    FILE *fileToSend = fopen(file, "rb"); // Open the file to be sent
    if (fileToSend == NULL) {
        perror("Client: Unable to open the file to send\n");
        exit(EXIT_FAILURE);
    }

    //======== Sending a file ========
    u_int16_t blockNumber = 1;
    char buffer[MAXDATA];
    size_t n = MAXDATA;

    do {
        // Construction of a packet to be sent
        n = fread(buffer, 1, MAXDATA, fileToSend);
        buffer[n] = '\0';
        char *packet;
        packet = malloc(n + 4);
        packet[0] = 0;
        packet[1] = 3;
        packet[2] = 0;
        packet[3] = blockNumber;
        strcpy(packet + 4, buffer);

        // Send the packet
        if ((messageLength = sendto(sockfd, packet, n + 4, 0, (struct sockaddr *)&addr, slen)) == -1) {
            perror("Client: 'sendto DATA' Error\n");
            exit(EXIT_FAILURE);
        }
        fileSize += messageLength - 4;
        printf("Client: Sent packet #%d of %d data bytes\n", blockNumber, messageLength - 4);

        //======== Waiting for acknowledgment from the server ========
        buf = malloc(MAXDATA + 4);
        if ((messageLength = recvfrom(sockfd, buf, MAXDATA + 4, 0, (struct sockaddr *)&addr, &slen)) == -1) {
            perror("Client: 'recvfrom' Error\n");
            exit(EXIT_FAILURE);
        }
        if (*(buf + 1) == 5) {
            displayError(buf);
        }
        printf("Client: Acknowledgment of packet %d from the server: %d%d|%d%d\n", *(buf + 3), *(buf), *(buf + 1), *(buf + 2), *(buf + 3));
        blockNumber += 1;
    } while (n == (size_t)MAXDATA);

    fclose(fileToSend);
    printf("Client: Transfer of the file '%s' of %d bytes to the server completed\n", file, fileSize);
}
      close(sockfd);
        return 0;
   }
